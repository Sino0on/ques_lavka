import requests
import time
from io import BytesIO
from django.core.files.base import ContentFile
from decouple import config
from product.models import Product, ImageProduct  # –Ω–µ –∑–∞–±—É–¥—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ


def import_product_images():
    base_url = 'https://api.moysklad.ru/api/remap/1.2/entity/product'
    headers = {"Authorization": f"Bearer {config('MS_TOKEN')}"}

    products = Product.objects.all()

    for product in products:
        if product.images.exists():
            print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω: —É –ø—Ä–æ–¥—É–∫—Ç–∞ {product.old_id} —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            continue
        time.sleep(0.3)  # üîí –Ω–µ –±–∞–Ω—è—Ç –∑–∞ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        print(product.id)
        response = requests.get(f"{base_url}/{product.old_id}/images", headers=headers)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.old_id}")
            continue
        if response.json()['rows'] == []:
            continue

        image_data = response.json()['rows'][0]

        miniature = image_data.get("miniature")
        if not miniature:
            print(f"–ù–µ—Ç miniature –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.old_id}")
            continue

        image_url = miniature.get("href")
        if not image_url:
            continue

        # –£–±–∏—Ä–∞–µ–º "?miniature=true"
        image_url = image_url.split('?')[0]

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            img_response = requests.get(image_url, stream=True, headers=headers)
            if img_response.status_code == 200:
                file_name = image_url.split("/")[-1]

                image_file = ContentFile(img_response.content)
                image_instance = ImageProduct(product=product)
                image_instance.image.save(file_name+'.jpg', image_file, save=True)

                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.old_id}")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ: {image_url}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return True